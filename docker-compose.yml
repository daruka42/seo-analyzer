version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: seo_postgres
    environment:
      POSTGRES_DB: seo_analyzer
      POSTGRES_USER: seouser
      POSTGRES_PASSWORD: seopassword123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      # Note: Removed locale args as they may not be available in Alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seouser -d seo_analyzer"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - seo_network

  redis:
    image: redis:7-alpine
    container_name: seo_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - seo_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: seo_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - seo_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: seo_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://seouser:seopassword123@postgres:5432/seo_analyzer
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_screenshots:/app/screenshots
      - backend_exports:/app/exports
      - /app/__pycache__
    restart: unless-stopped
    networks:
      - seo_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: seo_celery_worker
    command: celery -A tasks.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    environment:
      - DATABASE_URL=postgresql://seouser:seopassword123@postgres:5432/seo_analyzer
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PYTHONPATH=/app
      - C_FORCE_ROOT=1
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_screenshots:/app/screenshots
    restart: unless-stopped
    networks:
      - seo_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: seo_celery_beat
    command: celery -A tasks.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://seouser:seopassword123@postgres:5432/seo_analyzer
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    restart: unless-stopped
    networks:
      - seo_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: seo_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - seo_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: seo_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - seo_network
    profiles:
      - monitoring

networks:
  seo_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  backend_data:
  backend_logs:
  backend_screenshots:
  backend_exports:
  prometheus_data: